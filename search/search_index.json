{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Inside the Fabric Collection of recipes for Fortinet solutions, usually with ready to use code snippets.","title":"Home"},{"location":"#inside-the-fabric","text":"Collection of recipes for Fortinet solutions, usually with ready to use code snippets.","title":"Inside the Fabric"},{"location":"guides/fgvm_aws_bootstrap/","text":"FortiGate-VM AWS Bootstrap This deployment reference will will cover how to launch a FG-VM instance at AWS using Terraform. The instance will boot up with a minimal config and a license (ON DEMAND). Versions Terraform v0.13.5 Deployment main.tf # Provider terraform { required_providers { aws = { source = \"hashicorp/aws\" version = \"~> 3.22.0\" } template = { source = \"hashicorp/template\" version = \"~> 2.2.0\" } } } provider \"aws\" { region = var . region } # VPC resource \"aws_vpc\" \"this\" { cidr_block = var . cidr enable_dns_support = true enable_dns_hostnames = true enable_classiclink = false instance_tenancy = \"default\" tags = { Name = var . vpc_name Environment = var . environment } } resource \"aws_subnet\" \"public\" { vpc_id = aws_vpc . this . id cidr_block = var . subnet_public availability_zone = var . az tags = { Name = var . subnet_public_name Environment = var . environment } } resource \"aws_subnet\" \"private\" { vpc_id = aws_vpc . this . id cidr_block = var . subnet_private availability_zone = var . az tags = { Name = var . subnet_public_name Environment = var . environment } } resource \"aws_security_group\" \"public\" { name = var . sg_name_public description = var . sg_name_public vpc_id = aws_vpc . this . id ingress { from_port = 22 to_port = 22 protocol = \"tcp\" cidr_blocks = [ \"0.0.0.0/0\" ] } ingress { from_port = 443 to_port = 443 protocol = \"tcp\" cidr_blocks = [ \"0.0.0.0/0\" ] } ingress { from_port = 8443 to_port = 8443 protocol = \"tcp\" cidr_blocks = [ \"0.0.0.0/0\" ] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [ \"0.0.0.0/0\" ] } tags = { Name = var . sg_name_public Environment = var . environment } } resource \"aws_security_group\" \"private\" { name = var . sg_name_private description = var . sg_name_private vpc_id = aws_vpc . this . id ingress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [ \"0.0.0.0/0\" ] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [ \"0.0.0.0/0\" ] } tags = { Name = var . sg_name_private Environment = var . environment } } resource \"aws_network_interface\" \"public\" { description = var . interface_name_public subnet_id = aws_subnet . public . id } resource \"aws_network_interface\" \"private\" { description = var . interface_name_private subnet_id = aws_subnet . private . id source_dest_check = false } resource \"aws_network_interface_sg_attachment\" \"public\" { security_group_id = aws_security_group . public . id network_interface_id = aws_network_interface . public . id } resource \"aws_network_interface_sg_attachment\" \"private\" { security_group_id = aws_security_group . private . id network_interface_id = aws_network_interface . private . id } # Instance resource \"aws_key_pair\" \"this\" { key_name = var . key_name public_key = file ( \"~/.ssh/id_rsa.pub\" ) } data \"template_file\" \"fgtvm\" { template = file ( var . bootstrap_fgtvm ) } resource \"aws_instance\" \"fgtvm\" { ami = var . ami instance_type = var . size availability_zone = var . az key_name = aws_key_pair . this . key_name user_data = data . template_file . fgtvm . rendered root_block_device { volume_type = \"standard\" volume_size = \"2\" } ebs_block_device { device_name = \"/dev/sdb\" volume_size = \"30\" volume_type = \"standard\" } network_interface { network_interface_id = aws_network_interface . public . id device_index = 0 } network_interface { network_interface_id = aws_network_interface . private . id device_index = 1 } tags = { Name = var . vm_name Environment = var . environment } } # Routing resource \"aws_internet_gateway\" \"this\" { vpc_id = aws_vpc . this . id tags = { Name = var . igw_name } } resource \"aws_route_table\" \"public\" { vpc_id = aws_vpc . this . id tags = { Name = var . rt_name_public } } resource \"aws_route_table\" \"private\" { vpc_id = aws_vpc . this . id tags = { Name = var . rt_name_private } } resource \"aws_route\" \"public\" { route_table_id = aws_route_table . public . id destination_cidr_block = \"0.0.0.0/0\" gateway_id = aws_internet_gateway . this . id } resource \"aws_route\" \"private\" { depends_on = [ aws_instance . fgtvm ] route_table_id = aws_route_table . private . id destination_cidr_block = \"0.0.0.0/0\" network_interface_id = aws_network_interface . private . id } resource \"aws_route_table_association\" \"public\" { subnet_id = aws_subnet . public . id route_table_id = aws_route_table . public . id } resource \"aws_route_table_association\" \"private\" { subnet_id = aws_subnet . private . id route_table_id = aws_route_table . private . id } resource \"aws_eip\" \"this\" { vpc = true network_interface = aws_network_interface . public . id } # Outputs output \"FG_Public_IP\" { value = aws_eip . this . public_ip } output \"Username\" { value = \"admin\" } output \"Password\" { value = aws_instance . fgtvm . id } variables.tf # Provider variable \"region\" { type = string default = \"us-east-1\" } # VPC variable \"cidr\" { type = string default = \"10.1.0.0/16\" } variable \"vpc_name\" { type = string default = \"Terraform Demo\" } variable \"environment\" { type = string description = \"Environment Tag\" default = \"Terraform Demo\" } variable \"az\" { default = \"us-east-1a\" } variable \"subnet_public\" { default = \"10.1.0.0/24\" } variable \"subnet_public_name\" { type = string default = \"public subnet az1\" } variable \"subnet_private\" { default = \"10.1.1.0/24\" } variable \"subnet_private_name\" { type = string default = \"private subnet az1\" } variable \"interface_name_public\" { type = string default = \"fgt_port1\" } variable \"interface_name_private\" { type = string default = \"fgt_port2\" } variable \"sg_name_public\" { type = string default = \"Public Allow\" } variable \"sg_name_private\" { type = string default = \"Allow All\" } # Instance variable \"key_name\" { # cat ~/.ssh/id_rsa.pub | cut -f3 -d' ' default = \"me@my-computer\" } variable \"ami\" { type = string default = \"ami-0c184c594e9203c45\" # us-east-1 } variable \"size\" { default = \"c5n.xlarge\" } variable \"vm_name\" { type = string default = \"fgtvm\" } variable \"bootstrap_fgtvm\" { type = string default = \"fgtvm.conf\" } # Routing variable \"igw_name\" { type = string default = \"fgtvm-igw\" } variable \"rt_name_public\" { type = string default = \"fgtvm-public-rt\" } variable \"rt_name_private\" { type = string default = \"fgtvm-private-rt\" } fgtvm.conf config system global set hostname FGTVM end config system interface edit port1 set alias public set mode dhcp set allowaccess ping https ssh fgfm next edit port2 set alias private set mode dhcp set allowaccess ping https ssh fgfm set defaultgw disable next end References Fortinet: Terraform Deployment Templates","title":"FortiGate-VM AWS Bootstrap"},{"location":"guides/fgvm_aws_bootstrap/#fortigate-vm-aws-bootstrap","text":"This deployment reference will will cover how to launch a FG-VM instance at AWS using Terraform. The instance will boot up with a minimal config and a license (ON DEMAND).","title":"FortiGate-VM AWS Bootstrap"},{"location":"guides/fgvm_aws_bootstrap/#versions","text":"Terraform v0.13.5","title":"Versions"},{"location":"guides/fgvm_aws_bootstrap/#deployment","text":"main.tf # Provider terraform { required_providers { aws = { source = \"hashicorp/aws\" version = \"~> 3.22.0\" } template = { source = \"hashicorp/template\" version = \"~> 2.2.0\" } } } provider \"aws\" { region = var . region } # VPC resource \"aws_vpc\" \"this\" { cidr_block = var . cidr enable_dns_support = true enable_dns_hostnames = true enable_classiclink = false instance_tenancy = \"default\" tags = { Name = var . vpc_name Environment = var . environment } } resource \"aws_subnet\" \"public\" { vpc_id = aws_vpc . this . id cidr_block = var . subnet_public availability_zone = var . az tags = { Name = var . subnet_public_name Environment = var . environment } } resource \"aws_subnet\" \"private\" { vpc_id = aws_vpc . this . id cidr_block = var . subnet_private availability_zone = var . az tags = { Name = var . subnet_public_name Environment = var . environment } } resource \"aws_security_group\" \"public\" { name = var . sg_name_public description = var . sg_name_public vpc_id = aws_vpc . this . id ingress { from_port = 22 to_port = 22 protocol = \"tcp\" cidr_blocks = [ \"0.0.0.0/0\" ] } ingress { from_port = 443 to_port = 443 protocol = \"tcp\" cidr_blocks = [ \"0.0.0.0/0\" ] } ingress { from_port = 8443 to_port = 8443 protocol = \"tcp\" cidr_blocks = [ \"0.0.0.0/0\" ] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [ \"0.0.0.0/0\" ] } tags = { Name = var . sg_name_public Environment = var . environment } } resource \"aws_security_group\" \"private\" { name = var . sg_name_private description = var . sg_name_private vpc_id = aws_vpc . this . id ingress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [ \"0.0.0.0/0\" ] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [ \"0.0.0.0/0\" ] } tags = { Name = var . sg_name_private Environment = var . environment } } resource \"aws_network_interface\" \"public\" { description = var . interface_name_public subnet_id = aws_subnet . public . id } resource \"aws_network_interface\" \"private\" { description = var . interface_name_private subnet_id = aws_subnet . private . id source_dest_check = false } resource \"aws_network_interface_sg_attachment\" \"public\" { security_group_id = aws_security_group . public . id network_interface_id = aws_network_interface . public . id } resource \"aws_network_interface_sg_attachment\" \"private\" { security_group_id = aws_security_group . private . id network_interface_id = aws_network_interface . private . id } # Instance resource \"aws_key_pair\" \"this\" { key_name = var . key_name public_key = file ( \"~/.ssh/id_rsa.pub\" ) } data \"template_file\" \"fgtvm\" { template = file ( var . bootstrap_fgtvm ) } resource \"aws_instance\" \"fgtvm\" { ami = var . ami instance_type = var . size availability_zone = var . az key_name = aws_key_pair . this . key_name user_data = data . template_file . fgtvm . rendered root_block_device { volume_type = \"standard\" volume_size = \"2\" } ebs_block_device { device_name = \"/dev/sdb\" volume_size = \"30\" volume_type = \"standard\" } network_interface { network_interface_id = aws_network_interface . public . id device_index = 0 } network_interface { network_interface_id = aws_network_interface . private . id device_index = 1 } tags = { Name = var . vm_name Environment = var . environment } } # Routing resource \"aws_internet_gateway\" \"this\" { vpc_id = aws_vpc . this . id tags = { Name = var . igw_name } } resource \"aws_route_table\" \"public\" { vpc_id = aws_vpc . this . id tags = { Name = var . rt_name_public } } resource \"aws_route_table\" \"private\" { vpc_id = aws_vpc . this . id tags = { Name = var . rt_name_private } } resource \"aws_route\" \"public\" { route_table_id = aws_route_table . public . id destination_cidr_block = \"0.0.0.0/0\" gateway_id = aws_internet_gateway . this . id } resource \"aws_route\" \"private\" { depends_on = [ aws_instance . fgtvm ] route_table_id = aws_route_table . private . id destination_cidr_block = \"0.0.0.0/0\" network_interface_id = aws_network_interface . private . id } resource \"aws_route_table_association\" \"public\" { subnet_id = aws_subnet . public . id route_table_id = aws_route_table . public . id } resource \"aws_route_table_association\" \"private\" { subnet_id = aws_subnet . private . id route_table_id = aws_route_table . private . id } resource \"aws_eip\" \"this\" { vpc = true network_interface = aws_network_interface . public . id } # Outputs output \"FG_Public_IP\" { value = aws_eip . this . public_ip } output \"Username\" { value = \"admin\" } output \"Password\" { value = aws_instance . fgtvm . id } variables.tf # Provider variable \"region\" { type = string default = \"us-east-1\" } # VPC variable \"cidr\" { type = string default = \"10.1.0.0/16\" } variable \"vpc_name\" { type = string default = \"Terraform Demo\" } variable \"environment\" { type = string description = \"Environment Tag\" default = \"Terraform Demo\" } variable \"az\" { default = \"us-east-1a\" } variable \"subnet_public\" { default = \"10.1.0.0/24\" } variable \"subnet_public_name\" { type = string default = \"public subnet az1\" } variable \"subnet_private\" { default = \"10.1.1.0/24\" } variable \"subnet_private_name\" { type = string default = \"private subnet az1\" } variable \"interface_name_public\" { type = string default = \"fgt_port1\" } variable \"interface_name_private\" { type = string default = \"fgt_port2\" } variable \"sg_name_public\" { type = string default = \"Public Allow\" } variable \"sg_name_private\" { type = string default = \"Allow All\" } # Instance variable \"key_name\" { # cat ~/.ssh/id_rsa.pub | cut -f3 -d' ' default = \"me@my-computer\" } variable \"ami\" { type = string default = \"ami-0c184c594e9203c45\" # us-east-1 } variable \"size\" { default = \"c5n.xlarge\" } variable \"vm_name\" { type = string default = \"fgtvm\" } variable \"bootstrap_fgtvm\" { type = string default = \"fgtvm.conf\" } # Routing variable \"igw_name\" { type = string default = \"fgtvm-igw\" } variable \"rt_name_public\" { type = string default = \"fgtvm-public-rt\" } variable \"rt_name_private\" { type = string default = \"fgtvm-private-rt\" } fgtvm.conf config system global set hostname FGTVM end config system interface edit port1 set alias public set mode dhcp set allowaccess ping https ssh fgfm next edit port2 set alias private set mode dhcp set allowaccess ping https ssh fgfm set defaultgw disable next end","title":"Deployment"},{"location":"guides/fgvm_aws_bootstrap/#references","text":"Fortinet: Terraform Deployment Templates","title":"References"},{"location":"guides/fgvm_az_bootstrap/","text":"FortiGate-VM Azure Bootstrap This deployment reference will will cover how to launch a FG-VM instance at Azure using Terraform. The instance will boot up with a minimal config and a license (ON DEMAND). Versions Terraform v0.13.5 Azure CLI 2.16.0 Deployment main.tf # Provider terraform { required_providers { azurerm = { source = \"hashicorp/azurerm\" version = \"~> 2.41.0\" } random = { source = \"hashicorp/random\" version = \"~> 3.0.0\" } template = { source = \"hashicorp/template\" version = \"~> 2.2.0\" } } } provider \"azurerm\" { features {} } # Resource Group resource \"azurerm_resource_group\" \"this\" { name = var . rgname location = var . location tags = { environment = var . environment } } # Network resource \"azurerm_virtual_network\" \"this\" { name = var . vnet address_space = [ var . vnetcidr ] location = var . location resource_group_name = azurerm_resource_group . this . name tags = { environment = var . environment } } resource \"azurerm_subnet\" \"public\" { name = var . vnetpublicname resource_group_name = azurerm_resource_group . this . name virtual_network_name = azurerm_virtual_network . this . name address_prefixes = [ var . publiccidr ] } resource \"azurerm_subnet\" \"private\" { name = var . vnetprivatename resource_group_name = azurerm_resource_group . this . name virtual_network_name = azurerm_virtual_network . this . name address_prefixes = [ var . privatecidr ] } resource \"azurerm_public_ip\" \"this\" { name = var . fgpublicipname location = var . location resource_group_name = azurerm_resource_group . this . name allocation_method = \"Static\" tags = { environment = var . environment } } resource \"azurerm_network_security_group\" \"public\" { name = var . public_nsg_name location = var . location resource_group_name = azurerm_resource_group . this . name security_rule { name = \"TCP\" priority = 1001 direction = \"Inbound\" access = \"Allow\" protocol = \"Tcp\" source_port_range = \"*\" destination_port_range = \"*\" source_address_prefix = \"*\" destination_address_prefix = \"*\" } tags = { environment = var . environment } } resource \"azurerm_network_security_group\" \"private\" { name = var . private_nsg_name location = var . location resource_group_name = azurerm_resource_group . this . name security_rule { name = \"All\" priority = 1001 direction = \"Inbound\" access = \"Allow\" protocol = \"*\" source_port_range = \"*\" destination_port_range = \"*\" source_address_prefix = \"*\" destination_address_prefix = \"*\" } tags = { environment = var . environment } } resource \"azurerm_network_interface\" \"public\" { name = var . public_interface_name location = var . location resource_group_name = azurerm_resource_group . this . name ip_configuration { name = var . ipconfig_name subnet_id = azurerm_subnet . public . id private_ip_address_allocation = \"Dynamic\" primary = true public_ip_address_id = azurerm_public_ip . this . id } tags = { environment = var . environment } } resource \"azurerm_network_interface\" \"private\" { name = var . private_interface_name location = var . location resource_group_name = azurerm_resource_group . this . name ip_configuration { name = var . ipconfig_name subnet_id = azurerm_subnet . private . id private_ip_address_allocation = \"Dynamic\" } tags = { environment = var . environment } } resource \"azurerm_network_interface_security_group_association\" \"public\" { network_interface_id = azurerm_network_interface . public . id network_security_group_id = azurerm_network_security_group . public . id } resource \"azurerm_network_interface_security_group_association\" \"private\" { network_interface_id = azurerm_network_interface . private . id network_security_group_id = azurerm_network_security_group . private . id } # Storage resource \"random_id\" \"randomId\" { keepers = { resource_group = azurerm_resource_group . this . name } byte_length = 8 } resource \"azurerm_storage_account\" \"this\" { # name can only consist of lowercase letters and numbers, and must be # between 3 and 24 characters long name = random_id . randomId . hex resource_group_name = azurerm_resource_group . this . name location = var . location account_replication_type = \"LRS\" account_tier = \"Standard\" tags = { environment = var . environment } } # Instance data \"template_file\" \"fgtvm\" { template = file ( var . bootstrap_fgtvm ) } resource \"azurerm_virtual_machine\" \"fgtvm\" { name = var . vm_name location = var . location resource_group_name = azurerm_resource_group . this . name vm_size = var . size primary_network_interface_id = azurerm_network_interface . public . id network_interface_ids = [ azurerm_network_interface . public . id , azurerm_network_interface . private . id , ] storage_image_reference { publisher = var . publisher offer = var . fgtoffer sku = var . fgtsku version = var . fgtversion } plan { name = var . fgtsku publisher = var . publisher product = var . fgtoffer } storage_os_disk { name = \"osDisk\" caching = \"ReadWrite\" managed_disk_type = \"Standard_LRS\" create_option = \"FromImage\" } # Log data disks storage_data_disk { name = \"fgtvmdatadisk\" managed_disk_type = \"Standard_LRS\" create_option = \"Empty\" lun = 0 disk_size_gb = \"30\" } os_profile { computer_name = var . vm_name admin_username = var . adminusername admin_password = var . adminpassword custom_data = data . template_file . fgtvm . rendered } os_profile_linux_config { disable_password_authentication = false } boot_diagnostics { enabled = true storage_uri = azurerm_storage_account . this . primary_blob_endpoint } tags = { environment = var . environment } } # Routing resource \"azurerm_route_table\" \"private\" { depends_on = [ azurerm_virtual_machine . fgtvm ] name = \"InternalRouteTable1\" location = azurerm_resource_group . this . location resource_group_name = azurerm_resource_group . this . name } resource \"azurerm_route\" \"default\" { name = \"default\" resource_group_name = azurerm_resource_group . this . name route_table_name = azurerm_route_table . private . name address_prefix = \"0.0.0.0/0\" next_hop_type = \"VirtualAppliance\" next_hop_in_ip_address = azurerm_network_interface . private . private_ip_address } resource \"azurerm_subnet_route_table_association\" \"this\" { subnet_id = azurerm_subnet . private . id route_table_id = azurerm_route_table . private . id } # Outputs output \"Resource_Group\" { value = azurerm_resource_group . this . name } output \"FG_Public_IP\" { value = azurerm_public_ip . this . ip_address } output \"Username\" { value = var . adminusername } output \"Password\" { value = var . adminpassword } variables.tf # Resource Group variable \"rgname\" { type = string default = \"fgtsingle-mb\" } variable \"location\" { type = string default = \"eastus\" } variable \"environment\" { type = string description = \"Environment Tag\" default = \"Terraform Demo\" } # Network variable \"vnet\" { type = string default = \"fgtvnetwork\" } variable \"vnetcidr\" { type = string default = \"10.1.0.0/16\" } variable \"vnetpublicname\" { type = string default = \"publicSubnet\" } variable \"publiccidr\" { type = string default = \"10.1.0.0/24\" } variable \"vnetprivatename\" { type = string default = \"privateSubnet\" } variable \"privatecidr\" { type = string default = \"10.1.1.0/24\" } variable \"fgpublicipname\" { type = string default = \"FGTPublicIP\" } variable \"public_nsg_name\" { type = string default = \"PublicNetworkSecurityGroup\" } variable \"private_nsg_name\" { type = string default = \"PrivateNetworkSecurityGroup\" } variable \"public_interface_name\" { type = string default = \"fgtport1\" } variable \"private_interface_name\" { type = string default = \"fgtport2\" } variable \"ipconfig_name\" { type = string description = \"IP Configuration Name. Does not have to be unique.\" default = \"ipconfig1\" } # Instance variable \"vm_name\" { type = string default = \"fgtvm\" } variable \"size\" { type = string default = \"Standard_F4\" } variable \"publisher\" { type = string default = \"fortinet\" } variable \"fgtoffer\" { type = string default = \"fortinet_fortigate-vm_v5\" } variable \"fgtsku\" { type = string default = \"fortinet_fg-vm_payg_20190624\" } variable \"fgtversion\" { type = string default = \"6.4.1\" } variable \"adminusername\" { type = string default = \"azureadmin\" } variable \"adminpassword\" { type = string default = \"Fortinet123#\" } variable \"bootstrap_fgtvm\" { type = string default = \"fgtvm.conf\" } fgtvm.conf config system global set hostname FGTVM end config system interface edit port1 set alias public set mode dhcp set allowaccess ping https ssh fgfm next edit port2 set alias private set mode dhcp set allowaccess ping https ssh fgfm set defaultgw disable next end References Microsoft: Install the Azure CLI Fortinet: Terraform Deployment Templates","title":"FortiGate-VM Azure Bootstrap"},{"location":"guides/fgvm_az_bootstrap/#fortigate-vm-azure-bootstrap","text":"This deployment reference will will cover how to launch a FG-VM instance at Azure using Terraform. The instance will boot up with a minimal config and a license (ON DEMAND).","title":"FortiGate-VM Azure Bootstrap"},{"location":"guides/fgvm_az_bootstrap/#versions","text":"Terraform v0.13.5 Azure CLI 2.16.0","title":"Versions"},{"location":"guides/fgvm_az_bootstrap/#deployment","text":"main.tf # Provider terraform { required_providers { azurerm = { source = \"hashicorp/azurerm\" version = \"~> 2.41.0\" } random = { source = \"hashicorp/random\" version = \"~> 3.0.0\" } template = { source = \"hashicorp/template\" version = \"~> 2.2.0\" } } } provider \"azurerm\" { features {} } # Resource Group resource \"azurerm_resource_group\" \"this\" { name = var . rgname location = var . location tags = { environment = var . environment } } # Network resource \"azurerm_virtual_network\" \"this\" { name = var . vnet address_space = [ var . vnetcidr ] location = var . location resource_group_name = azurerm_resource_group . this . name tags = { environment = var . environment } } resource \"azurerm_subnet\" \"public\" { name = var . vnetpublicname resource_group_name = azurerm_resource_group . this . name virtual_network_name = azurerm_virtual_network . this . name address_prefixes = [ var . publiccidr ] } resource \"azurerm_subnet\" \"private\" { name = var . vnetprivatename resource_group_name = azurerm_resource_group . this . name virtual_network_name = azurerm_virtual_network . this . name address_prefixes = [ var . privatecidr ] } resource \"azurerm_public_ip\" \"this\" { name = var . fgpublicipname location = var . location resource_group_name = azurerm_resource_group . this . name allocation_method = \"Static\" tags = { environment = var . environment } } resource \"azurerm_network_security_group\" \"public\" { name = var . public_nsg_name location = var . location resource_group_name = azurerm_resource_group . this . name security_rule { name = \"TCP\" priority = 1001 direction = \"Inbound\" access = \"Allow\" protocol = \"Tcp\" source_port_range = \"*\" destination_port_range = \"*\" source_address_prefix = \"*\" destination_address_prefix = \"*\" } tags = { environment = var . environment } } resource \"azurerm_network_security_group\" \"private\" { name = var . private_nsg_name location = var . location resource_group_name = azurerm_resource_group . this . name security_rule { name = \"All\" priority = 1001 direction = \"Inbound\" access = \"Allow\" protocol = \"*\" source_port_range = \"*\" destination_port_range = \"*\" source_address_prefix = \"*\" destination_address_prefix = \"*\" } tags = { environment = var . environment } } resource \"azurerm_network_interface\" \"public\" { name = var . public_interface_name location = var . location resource_group_name = azurerm_resource_group . this . name ip_configuration { name = var . ipconfig_name subnet_id = azurerm_subnet . public . id private_ip_address_allocation = \"Dynamic\" primary = true public_ip_address_id = azurerm_public_ip . this . id } tags = { environment = var . environment } } resource \"azurerm_network_interface\" \"private\" { name = var . private_interface_name location = var . location resource_group_name = azurerm_resource_group . this . name ip_configuration { name = var . ipconfig_name subnet_id = azurerm_subnet . private . id private_ip_address_allocation = \"Dynamic\" } tags = { environment = var . environment } } resource \"azurerm_network_interface_security_group_association\" \"public\" { network_interface_id = azurerm_network_interface . public . id network_security_group_id = azurerm_network_security_group . public . id } resource \"azurerm_network_interface_security_group_association\" \"private\" { network_interface_id = azurerm_network_interface . private . id network_security_group_id = azurerm_network_security_group . private . id } # Storage resource \"random_id\" \"randomId\" { keepers = { resource_group = azurerm_resource_group . this . name } byte_length = 8 } resource \"azurerm_storage_account\" \"this\" { # name can only consist of lowercase letters and numbers, and must be # between 3 and 24 characters long name = random_id . randomId . hex resource_group_name = azurerm_resource_group . this . name location = var . location account_replication_type = \"LRS\" account_tier = \"Standard\" tags = { environment = var . environment } } # Instance data \"template_file\" \"fgtvm\" { template = file ( var . bootstrap_fgtvm ) } resource \"azurerm_virtual_machine\" \"fgtvm\" { name = var . vm_name location = var . location resource_group_name = azurerm_resource_group . this . name vm_size = var . size primary_network_interface_id = azurerm_network_interface . public . id network_interface_ids = [ azurerm_network_interface . public . id , azurerm_network_interface . private . id , ] storage_image_reference { publisher = var . publisher offer = var . fgtoffer sku = var . fgtsku version = var . fgtversion } plan { name = var . fgtsku publisher = var . publisher product = var . fgtoffer } storage_os_disk { name = \"osDisk\" caching = \"ReadWrite\" managed_disk_type = \"Standard_LRS\" create_option = \"FromImage\" } # Log data disks storage_data_disk { name = \"fgtvmdatadisk\" managed_disk_type = \"Standard_LRS\" create_option = \"Empty\" lun = 0 disk_size_gb = \"30\" } os_profile { computer_name = var . vm_name admin_username = var . adminusername admin_password = var . adminpassword custom_data = data . template_file . fgtvm . rendered } os_profile_linux_config { disable_password_authentication = false } boot_diagnostics { enabled = true storage_uri = azurerm_storage_account . this . primary_blob_endpoint } tags = { environment = var . environment } } # Routing resource \"azurerm_route_table\" \"private\" { depends_on = [ azurerm_virtual_machine . fgtvm ] name = \"InternalRouteTable1\" location = azurerm_resource_group . this . location resource_group_name = azurerm_resource_group . this . name } resource \"azurerm_route\" \"default\" { name = \"default\" resource_group_name = azurerm_resource_group . this . name route_table_name = azurerm_route_table . private . name address_prefix = \"0.0.0.0/0\" next_hop_type = \"VirtualAppliance\" next_hop_in_ip_address = azurerm_network_interface . private . private_ip_address } resource \"azurerm_subnet_route_table_association\" \"this\" { subnet_id = azurerm_subnet . private . id route_table_id = azurerm_route_table . private . id } # Outputs output \"Resource_Group\" { value = azurerm_resource_group . this . name } output \"FG_Public_IP\" { value = azurerm_public_ip . this . ip_address } output \"Username\" { value = var . adminusername } output \"Password\" { value = var . adminpassword } variables.tf # Resource Group variable \"rgname\" { type = string default = \"fgtsingle-mb\" } variable \"location\" { type = string default = \"eastus\" } variable \"environment\" { type = string description = \"Environment Tag\" default = \"Terraform Demo\" } # Network variable \"vnet\" { type = string default = \"fgtvnetwork\" } variable \"vnetcidr\" { type = string default = \"10.1.0.0/16\" } variable \"vnetpublicname\" { type = string default = \"publicSubnet\" } variable \"publiccidr\" { type = string default = \"10.1.0.0/24\" } variable \"vnetprivatename\" { type = string default = \"privateSubnet\" } variable \"privatecidr\" { type = string default = \"10.1.1.0/24\" } variable \"fgpublicipname\" { type = string default = \"FGTPublicIP\" } variable \"public_nsg_name\" { type = string default = \"PublicNetworkSecurityGroup\" } variable \"private_nsg_name\" { type = string default = \"PrivateNetworkSecurityGroup\" } variable \"public_interface_name\" { type = string default = \"fgtport1\" } variable \"private_interface_name\" { type = string default = \"fgtport2\" } variable \"ipconfig_name\" { type = string description = \"IP Configuration Name. Does not have to be unique.\" default = \"ipconfig1\" } # Instance variable \"vm_name\" { type = string default = \"fgtvm\" } variable \"size\" { type = string default = \"Standard_F4\" } variable \"publisher\" { type = string default = \"fortinet\" } variable \"fgtoffer\" { type = string default = \"fortinet_fortigate-vm_v5\" } variable \"fgtsku\" { type = string default = \"fortinet_fg-vm_payg_20190624\" } variable \"fgtversion\" { type = string default = \"6.4.1\" } variable \"adminusername\" { type = string default = \"azureadmin\" } variable \"adminpassword\" { type = string default = \"Fortinet123#\" } variable \"bootstrap_fgtvm\" { type = string default = \"fgtvm.conf\" } fgtvm.conf config system global set hostname FGTVM end config system interface edit port1 set alias public set mode dhcp set allowaccess ping https ssh fgfm next edit port2 set alias private set mode dhcp set allowaccess ping https ssh fgfm set defaultgw disable next end","title":"Deployment"},{"location":"guides/fgvm_az_bootstrap/#references","text":"Microsoft: Install the Azure CLI Fortinet: Terraform Deployment Templates","title":"References"},{"location":"guides/fgvm_gcp_bootstrap/","text":"FortiGate-VM GCP Bootstrap This deployment reference will will cover how to launch a FG-VM instance at GCP using Terraform. The instance will boot up with a minimal config and a license (ON DEMAND). Versions Terraform v0.14.4 Deployment main.tf # Provider terraform { required_version = \"> = 0 . 12 . 0 \" required_providers { google = { source = \"hashicorp/google\" version = \"~> 3.52.0\" } random = { source = \"hashicorp/random\" version = \"~> 3.0.0\" } template = { source = \"hashicorp/template\" version = \"~> 2.2.0\" } } } provider \"google\" { project = var . project region = var . region zone = var . zone } # VPC resource \"google_compute_network\" \"public\" { name = var . network_public_name auto_create_subnetworks = false } resource \"google_compute_network\" \"private\" { name = var . network_private_name auto_create_subnetworks = false } resource \"google_compute_subnetwork\" \"public\" { name = var . subnet_public_name region = var . region network = google_compute_network . public . name ip_cidr_range = var . subnet_public private_ip_google_access = true } resource \"google_compute_subnetwork\" \"private\" { name = var . subnet_private_name region = var . region network = google_compute_network . private . name ip_cidr_range = var . subnet_private } resource \"google_compute_firewall\" \"public\" { name = var . sg_name_public network = google_compute_network . public . name allow { protocol = \"tcp\" ports = [ \"22\", \"80\", \"443\" ] } allow { protocol = \"icmp\" } source_ranges = [ \"0.0.0.0/0\" ] target_tags = [ \"public\" ] } resource \"google_compute_firewall\" \"private\" { name = var . sg_name_private network = google_compute_network . private . name allow { protocol = \"all\" } source_ranges = [ \"0.0.0.0/0\" ] target_tags = [ \"private\" ] } # Instance resource \"random_id\" \"this\" { byte_length = 8 } resource \"google_compute_disk\" \"this\" { name = \"log-disk-${random_id.this.hex}\" size = 30 type = \"pd-standard\" zone = var . zone } data \"template_file\" \"fgtvm\" { template = file ( var . bootstrap_fgtvm ) } resource \"google_compute_instance\" \"fgtvm\" { name = var . vm_name machine_type = var . type zone = var . zone can_ip_forward = \"true\" tags = [ \"public\", \"private\" ] boot_disk { initialize_params { image = var . image } } attached_disk { source = google_compute_disk . this . name } network_interface { subnetwork = google_compute_subnetwork . public . name access_config { } } network_interface { subnetwork = google_compute_subnetwork . private . name } metadata = { user-data = data . template_file . fgtvm . rendered } service_account { scopes = [ \"userinfo-email\", \"compute-ro\", \"storage-ro\" ] } } # Outputs output \"FG_Public_IP\" { value = google_compute_instance . fgtvm . network_interface . 0 . access_config . 0 . nat_ip } output \"Username\" { value = \"admin\" } output \"Password\" { value = google_compute_instance . fgtvm . instance_id } variables.tf # Provider # Region variable \"region\" { type = string default = \"us-east1\" } # Zone variable \"zone\" { type = string default = \"us-east1-b\" } # Project variable \"project\" { type = string default = \"YOUR_PROJECT_ID\" } # VPC variable \"network_public_name\" { type = string default = \"tf-demo-public\" } variable \"network_private_name\" { type = string default = \"tf-demo-private\" } variable \"subnet_public\" { default = \"10.1.0.0/24\" } variable \"subnet_public_name\" { type = string default = \"public-subnet1\" } variable \"subnet_private\" { default = \"10.1.1.0/24\" } variable \"subnet_private_name\" { type = string default = \"private-subnet1\" } variable \"sg_name_public\" { type = string default = \"public-allow\" } variable \"sg_name_private\" { type = string default = \"allow-all\" } # Instance variable \"vm_name\" { type = string default = \"fgtvm\" } variable \"image\" { type = string # FG 6.4.1 ON-DEMAND default = \"projects/fortigcp-project-001/global/images/fortinet-fgtondemand-641-20200610-001-w-license\" } variable \"type\" { type = string default = \"n1-standard-1\" } variable \"bootstrap_fgtvm\" { type = string default = \"fgtvm.conf\" } fgtvm.conf config system global set hostname FGTVM end config system interface edit port1 set alias public set mode dhcp set allowaccess ping https ssh fgfm next edit port2 set alias private set mode dhcp set allowaccess ping https ssh fgfm set defaultgw disable next end References Fortinet: Terraform Deployment Templates","title":"FortiGate-VM GCP Bootstrap"},{"location":"guides/fgvm_gcp_bootstrap/#fortigate-vm-gcp-bootstrap","text":"This deployment reference will will cover how to launch a FG-VM instance at GCP using Terraform. The instance will boot up with a minimal config and a license (ON DEMAND).","title":"FortiGate-VM GCP Bootstrap"},{"location":"guides/fgvm_gcp_bootstrap/#versions","text":"Terraform v0.14.4","title":"Versions"},{"location":"guides/fgvm_gcp_bootstrap/#deployment","text":"main.tf # Provider terraform { required_version = \"> = 0 . 12 . 0 \" required_providers { google = { source = \"hashicorp/google\" version = \"~> 3.52.0\" } random = { source = \"hashicorp/random\" version = \"~> 3.0.0\" } template = { source = \"hashicorp/template\" version = \"~> 2.2.0\" } } } provider \"google\" { project = var . project region = var . region zone = var . zone } # VPC resource \"google_compute_network\" \"public\" { name = var . network_public_name auto_create_subnetworks = false } resource \"google_compute_network\" \"private\" { name = var . network_private_name auto_create_subnetworks = false } resource \"google_compute_subnetwork\" \"public\" { name = var . subnet_public_name region = var . region network = google_compute_network . public . name ip_cidr_range = var . subnet_public private_ip_google_access = true } resource \"google_compute_subnetwork\" \"private\" { name = var . subnet_private_name region = var . region network = google_compute_network . private . name ip_cidr_range = var . subnet_private } resource \"google_compute_firewall\" \"public\" { name = var . sg_name_public network = google_compute_network . public . name allow { protocol = \"tcp\" ports = [ \"22\", \"80\", \"443\" ] } allow { protocol = \"icmp\" } source_ranges = [ \"0.0.0.0/0\" ] target_tags = [ \"public\" ] } resource \"google_compute_firewall\" \"private\" { name = var . sg_name_private network = google_compute_network . private . name allow { protocol = \"all\" } source_ranges = [ \"0.0.0.0/0\" ] target_tags = [ \"private\" ] } # Instance resource \"random_id\" \"this\" { byte_length = 8 } resource \"google_compute_disk\" \"this\" { name = \"log-disk-${random_id.this.hex}\" size = 30 type = \"pd-standard\" zone = var . zone } data \"template_file\" \"fgtvm\" { template = file ( var . bootstrap_fgtvm ) } resource \"google_compute_instance\" \"fgtvm\" { name = var . vm_name machine_type = var . type zone = var . zone can_ip_forward = \"true\" tags = [ \"public\", \"private\" ] boot_disk { initialize_params { image = var . image } } attached_disk { source = google_compute_disk . this . name } network_interface { subnetwork = google_compute_subnetwork . public . name access_config { } } network_interface { subnetwork = google_compute_subnetwork . private . name } metadata = { user-data = data . template_file . fgtvm . rendered } service_account { scopes = [ \"userinfo-email\", \"compute-ro\", \"storage-ro\" ] } } # Outputs output \"FG_Public_IP\" { value = google_compute_instance . fgtvm . network_interface . 0 . access_config . 0 . nat_ip } output \"Username\" { value = \"admin\" } output \"Password\" { value = google_compute_instance . fgtvm . instance_id } variables.tf # Provider # Region variable \"region\" { type = string default = \"us-east1\" } # Zone variable \"zone\" { type = string default = \"us-east1-b\" } # Project variable \"project\" { type = string default = \"YOUR_PROJECT_ID\" } # VPC variable \"network_public_name\" { type = string default = \"tf-demo-public\" } variable \"network_private_name\" { type = string default = \"tf-demo-private\" } variable \"subnet_public\" { default = \"10.1.0.0/24\" } variable \"subnet_public_name\" { type = string default = \"public-subnet1\" } variable \"subnet_private\" { default = \"10.1.1.0/24\" } variable \"subnet_private_name\" { type = string default = \"private-subnet1\" } variable \"sg_name_public\" { type = string default = \"public-allow\" } variable \"sg_name_private\" { type = string default = \"allow-all\" } # Instance variable \"vm_name\" { type = string default = \"fgtvm\" } variable \"image\" { type = string # FG 6.4.1 ON-DEMAND default = \"projects/fortigcp-project-001/global/images/fortinet-fgtondemand-641-20200610-001-w-license\" } variable \"type\" { type = string default = \"n1-standard-1\" } variable \"bootstrap_fgtvm\" { type = string default = \"fgtvm.conf\" } fgtvm.conf config system global set hostname FGTVM end config system interface edit port1 set alias public set mode dhcp set allowaccess ping https ssh fgfm next edit port2 set alias private set mode dhcp set allowaccess ping https ssh fgfm set defaultgw disable next end","title":"Deployment"},{"location":"guides/fgvm_gcp_bootstrap/#references","text":"Fortinet: Terraform Deployment Templates","title":"References"},{"location":"guides/system_admin_saml/","text":"System Admin and SAML Configure a FortiOS system admin that will authenticate against a SAML Identity Provider, in this case, Okta. Versions Terraform v0.13.5 Deployment main.tf # Provider terraform { required_providers { aws = { source = \"hashicorp/aws\" version = \"~> 3.22.0\" } template = { source = \"hashicorp/template\" version = \"~> 2.2.0\" } } } provider \"aws\" { region = var . region } # VPC resource \"aws_vpc\" \"this\" { cidr_block = var . cidr enable_dns_support = true enable_dns_hostnames = true enable_classiclink = false instance_tenancy = \"default\" tags = { Name = var . vpc_name Environment = var . environment } } resource \"aws_subnet\" \"public\" { vpc_id = aws_vpc . this . id cidr_block = var . subnet_public availability_zone = var . az tags = { Name = var . subnet_public_name Environment = var . environment } } resource \"aws_subnet\" \"private\" { vpc_id = aws_vpc . this . id cidr_block = var . subnet_private availability_zone = var . az tags = { Name = var . subnet_public_name Environment = var . environment } } resource \"aws_security_group\" \"public\" { name = var . sg_name_public description = var . sg_name_public vpc_id = aws_vpc . this . id ingress { from_port = 22 to_port = 22 protocol = \"tcp\" cidr_blocks = [ \"0.0.0.0/0\" ] } ingress { from_port = 443 to_port = 443 protocol = \"tcp\" cidr_blocks = [ \"0.0.0.0/0\" ] } ingress { from_port = 8443 to_port = 8443 protocol = \"tcp\" cidr_blocks = [ \"0.0.0.0/0\" ] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [ \"0.0.0.0/0\" ] } tags = { Name = var . sg_name_public Environment = var . environment } } resource \"aws_security_group\" \"private\" { name = var . sg_name_private description = var . sg_name_private vpc_id = aws_vpc . this . id ingress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [ \"0.0.0.0/0\" ] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [ \"0.0.0.0/0\" ] } tags = { Name = var . sg_name_private Environment = var . environment } } resource \"aws_network_interface\" \"public\" { description = var . interface_name_public subnet_id = aws_subnet . public . id } resource \"aws_network_interface\" \"private\" { description = var . interface_name_private subnet_id = aws_subnet . private . id source_dest_check = false } resource \"aws_network_interface_sg_attachment\" \"public\" { security_group_id = aws_security_group . public . id network_interface_id = aws_network_interface . public . id } resource \"aws_network_interface_sg_attachment\" \"private\" { security_group_id = aws_security_group . private . id network_interface_id = aws_network_interface . private . id } # Instance resource \"aws_key_pair\" \"this\" { key_name = var . key_name public_key = file ( \"~/.ssh/id_rsa.pub\" ) } data \"template_file\" \"fgtvm\" { template = file ( var . bootstrap_fgtvm ) } resource \"aws_instance\" \"fgtvm\" { ami = var . ami instance_type = var . size availability_zone = var . az key_name = aws_key_pair . this . key_name user_data = data . template_file . fgtvm . rendered root_block_device { volume_type = \"standard\" volume_size = \"2\" } ebs_block_device { device_name = \"/dev/sdb\" volume_size = \"30\" volume_type = \"standard\" } network_interface { network_interface_id = aws_network_interface . public . id device_index = 0 } network_interface { network_interface_id = aws_network_interface . private . id device_index = 1 } tags = { Name = var . vm_name Environment = var . environment } } # Routing resource \"aws_internet_gateway\" \"this\" { vpc_id = aws_vpc . this . id tags = { Name = var . igw_name } } resource \"aws_route_table\" \"public\" { vpc_id = aws_vpc . this . id tags = { Name = var . rt_name_public } } resource \"aws_route_table\" \"private\" { vpc_id = aws_vpc . this . id tags = { Name = var . rt_name_private } } resource \"aws_route\" \"public\" { route_table_id = aws_route_table . public . id destination_cidr_block = \"0.0.0.0/0\" gateway_id = aws_internet_gateway . this . id } resource \"aws_route\" \"private\" { depends_on = [ aws_instance . fgtvm ] route_table_id = aws_route_table . private . id destination_cidr_block = \"0.0.0.0/0\" network_interface_id = aws_network_interface . private . id } resource \"aws_route_table_association\" \"public\" { subnet_id = aws_subnet . public . id route_table_id = aws_route_table . public . id } resource \"aws_route_table_association\" \"private\" { subnet_id = aws_subnet . private . id route_table_id = aws_route_table . private . id } resource \"aws_eip\" \"this\" { vpc = true network_interface = aws_network_interface . public . id } # Outputs output \"FG_Public_IP\" { value = aws_eip . this . public_ip } output \"Username\" { value = \"admin\" } output \"Password\" { value = aws_instance . fgtvm . id } variables.tf # Provider variable \"region\" { type = string default = \"us-east-1\" } # VPC variable \"cidr\" { type = string default = \"10.1.0.0/16\" } variable \"vpc_name\" { type = string default = \"Terraform Demo\" } variable \"environment\" { type = string description = \"Environment Tag\" default = \"Terraform Demo\" } variable \"az\" { default = \"us-east-1a\" } variable \"subnet_public\" { default = \"10.1.0.0/24\" } variable \"subnet_public_name\" { type = string default = \"public subnet az1\" } variable \"subnet_private\" { default = \"10.1.1.0/24\" } variable \"subnet_private_name\" { type = string default = \"private subnet az1\" } variable \"interface_name_public\" { type = string default = \"fgt_port1\" } variable \"interface_name_private\" { type = string default = \"fgt_port2\" } variable \"sg_name_public\" { type = string default = \"Public Allow\" } variable \"sg_name_private\" { type = string default = \"Allow All\" } # Instance variable \"key_name\" { # cat ~/.ssh/id_rsa.pub | cut -f3 -d' ' default = \"me@my-computer\" } variable \"ami\" { type = string default = \"ami-0c184c594e9203c45\" # us-east-1 } variable \"size\" { default = \"c5n.xlarge\" } variable \"vm_name\" { type = string default = \"fgtvm\" } variable \"bootstrap_fgtvm\" { type = string default = \"fgtvm.conf\" } # Routing variable \"igw_name\" { type = string default = \"fgtvm-igw\" } variable \"rt_name_public\" { type = string default = \"fgtvm-public-rt\" } variable \"rt_name_private\" { type = string default = \"fgtvm-private-rt\" } fgtvm.conf config system global set hostname FGTVM end config system interface edit port1 set alias public set mode dhcp set allowaccess ping https ssh fgfm next edit port2 set alias private set mode dhcp set allowaccess ping https ssh fgfm set defaultgw disable next end References Fortinet: Terraform Deployment Templates Okta: Create a SAML integration using AIW","title":"System Admin and SAML"},{"location":"guides/system_admin_saml/#system-admin-and-saml","text":"Configure a FortiOS system admin that will authenticate against a SAML Identity Provider, in this case, Okta.","title":"System Admin and SAML"},{"location":"guides/system_admin_saml/#versions","text":"Terraform v0.13.5","title":"Versions"},{"location":"guides/system_admin_saml/#deployment","text":"main.tf # Provider terraform { required_providers { aws = { source = \"hashicorp/aws\" version = \"~> 3.22.0\" } template = { source = \"hashicorp/template\" version = \"~> 2.2.0\" } } } provider \"aws\" { region = var . region } # VPC resource \"aws_vpc\" \"this\" { cidr_block = var . cidr enable_dns_support = true enable_dns_hostnames = true enable_classiclink = false instance_tenancy = \"default\" tags = { Name = var . vpc_name Environment = var . environment } } resource \"aws_subnet\" \"public\" { vpc_id = aws_vpc . this . id cidr_block = var . subnet_public availability_zone = var . az tags = { Name = var . subnet_public_name Environment = var . environment } } resource \"aws_subnet\" \"private\" { vpc_id = aws_vpc . this . id cidr_block = var . subnet_private availability_zone = var . az tags = { Name = var . subnet_public_name Environment = var . environment } } resource \"aws_security_group\" \"public\" { name = var . sg_name_public description = var . sg_name_public vpc_id = aws_vpc . this . id ingress { from_port = 22 to_port = 22 protocol = \"tcp\" cidr_blocks = [ \"0.0.0.0/0\" ] } ingress { from_port = 443 to_port = 443 protocol = \"tcp\" cidr_blocks = [ \"0.0.0.0/0\" ] } ingress { from_port = 8443 to_port = 8443 protocol = \"tcp\" cidr_blocks = [ \"0.0.0.0/0\" ] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [ \"0.0.0.0/0\" ] } tags = { Name = var . sg_name_public Environment = var . environment } } resource \"aws_security_group\" \"private\" { name = var . sg_name_private description = var . sg_name_private vpc_id = aws_vpc . this . id ingress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [ \"0.0.0.0/0\" ] } egress { from_port = 0 to_port = 0 protocol = \"-1\" cidr_blocks = [ \"0.0.0.0/0\" ] } tags = { Name = var . sg_name_private Environment = var . environment } } resource \"aws_network_interface\" \"public\" { description = var . interface_name_public subnet_id = aws_subnet . public . id } resource \"aws_network_interface\" \"private\" { description = var . interface_name_private subnet_id = aws_subnet . private . id source_dest_check = false } resource \"aws_network_interface_sg_attachment\" \"public\" { security_group_id = aws_security_group . public . id network_interface_id = aws_network_interface . public . id } resource \"aws_network_interface_sg_attachment\" \"private\" { security_group_id = aws_security_group . private . id network_interface_id = aws_network_interface . private . id } # Instance resource \"aws_key_pair\" \"this\" { key_name = var . key_name public_key = file ( \"~/.ssh/id_rsa.pub\" ) } data \"template_file\" \"fgtvm\" { template = file ( var . bootstrap_fgtvm ) } resource \"aws_instance\" \"fgtvm\" { ami = var . ami instance_type = var . size availability_zone = var . az key_name = aws_key_pair . this . key_name user_data = data . template_file . fgtvm . rendered root_block_device { volume_type = \"standard\" volume_size = \"2\" } ebs_block_device { device_name = \"/dev/sdb\" volume_size = \"30\" volume_type = \"standard\" } network_interface { network_interface_id = aws_network_interface . public . id device_index = 0 } network_interface { network_interface_id = aws_network_interface . private . id device_index = 1 } tags = { Name = var . vm_name Environment = var . environment } } # Routing resource \"aws_internet_gateway\" \"this\" { vpc_id = aws_vpc . this . id tags = { Name = var . igw_name } } resource \"aws_route_table\" \"public\" { vpc_id = aws_vpc . this . id tags = { Name = var . rt_name_public } } resource \"aws_route_table\" \"private\" { vpc_id = aws_vpc . this . id tags = { Name = var . rt_name_private } } resource \"aws_route\" \"public\" { route_table_id = aws_route_table . public . id destination_cidr_block = \"0.0.0.0/0\" gateway_id = aws_internet_gateway . this . id } resource \"aws_route\" \"private\" { depends_on = [ aws_instance . fgtvm ] route_table_id = aws_route_table . private . id destination_cidr_block = \"0.0.0.0/0\" network_interface_id = aws_network_interface . private . id } resource \"aws_route_table_association\" \"public\" { subnet_id = aws_subnet . public . id route_table_id = aws_route_table . public . id } resource \"aws_route_table_association\" \"private\" { subnet_id = aws_subnet . private . id route_table_id = aws_route_table . private . id } resource \"aws_eip\" \"this\" { vpc = true network_interface = aws_network_interface . public . id } # Outputs output \"FG_Public_IP\" { value = aws_eip . this . public_ip } output \"Username\" { value = \"admin\" } output \"Password\" { value = aws_instance . fgtvm . id } variables.tf # Provider variable \"region\" { type = string default = \"us-east-1\" } # VPC variable \"cidr\" { type = string default = \"10.1.0.0/16\" } variable \"vpc_name\" { type = string default = \"Terraform Demo\" } variable \"environment\" { type = string description = \"Environment Tag\" default = \"Terraform Demo\" } variable \"az\" { default = \"us-east-1a\" } variable \"subnet_public\" { default = \"10.1.0.0/24\" } variable \"subnet_public_name\" { type = string default = \"public subnet az1\" } variable \"subnet_private\" { default = \"10.1.1.0/24\" } variable \"subnet_private_name\" { type = string default = \"private subnet az1\" } variable \"interface_name_public\" { type = string default = \"fgt_port1\" } variable \"interface_name_private\" { type = string default = \"fgt_port2\" } variable \"sg_name_public\" { type = string default = \"Public Allow\" } variable \"sg_name_private\" { type = string default = \"Allow All\" } # Instance variable \"key_name\" { # cat ~/.ssh/id_rsa.pub | cut -f3 -d' ' default = \"me@my-computer\" } variable \"ami\" { type = string default = \"ami-0c184c594e9203c45\" # us-east-1 } variable \"size\" { default = \"c5n.xlarge\" } variable \"vm_name\" { type = string default = \"fgtvm\" } variable \"bootstrap_fgtvm\" { type = string default = \"fgtvm.conf\" } # Routing variable \"igw_name\" { type = string default = \"fgtvm-igw\" } variable \"rt_name_public\" { type = string default = \"fgtvm-public-rt\" } variable \"rt_name_private\" { type = string default = \"fgtvm-private-rt\" } fgtvm.conf config system global set hostname FGTVM end config system interface edit port1 set alias public set mode dhcp set allowaccess ping https ssh fgfm next edit port2 set alias private set mode dhcp set allowaccess ping https ssh fgfm set defaultgw disable next end","title":"Deployment"},{"location":"guides/system_admin_saml/#references","text":"Fortinet: Terraform Deployment Templates Okta: Create a SAML integration using AIW","title":"References"},{"location":"reference/firewall_address/","text":"Firewall Address Create addresses that can be used in firewall policies. Versions Ansible v2.10.4 Ansible collection fortinet.fortios v2.0.0 FortiOS 6.4 Usage CLI config firewall address edit Finance-Server set subnet 10 .100.77.200/32 next end Ansible #!/usr/bin/env ansible-playbook --- - hosts : Enterprise_Core vars : fw_addr : name : Finance-Server subnet : 10.100.77.200/32 tasks : - name : create finance-server addr fortinet.fortios.fortios_firewall_address : state : \"present\" access_token : \"{{ fortios_access_token }}\" firewall_address : name : \"{{ fw_addr.name }}\" subnet : \"{{ fw_addr.subnet }}\" Terraform variable \"fw_addr\" { type = map ( string ) default = { \"name\" = \"Finance-Server\" \"subnet\" = \"10.100.77.200/32\" } } resource \"fortios_firewall_address\" \"fw_addr\" { name = var . fw_addr . name subnet = var . fw_addr . subnet } References CLI Reference","title":"Objects"},{"location":"reference/firewall_address/#firewall-address","text":"Create addresses that can be used in firewall policies.","title":"Firewall Address"},{"location":"reference/firewall_address/#versions","text":"Ansible v2.10.4 Ansible collection fortinet.fortios v2.0.0 FortiOS 6.4","title":"Versions"},{"location":"reference/firewall_address/#usage","text":"CLI config firewall address edit Finance-Server set subnet 10 .100.77.200/32 next end Ansible #!/usr/bin/env ansible-playbook --- - hosts : Enterprise_Core vars : fw_addr : name : Finance-Server subnet : 10.100.77.200/32 tasks : - name : create finance-server addr fortinet.fortios.fortios_firewall_address : state : \"present\" access_token : \"{{ fortios_access_token }}\" firewall_address : name : \"{{ fw_addr.name }}\" subnet : \"{{ fw_addr.subnet }}\" Terraform variable \"fw_addr\" { type = map ( string ) default = { \"name\" = \"Finance-Server\" \"subnet\" = \"10.100.77.200/32\" } } resource \"fortios_firewall_address\" \"fw_addr\" { name = var . fw_addr . name subnet = var . fw_addr . subnet }","title":"Usage"},{"location":"reference/firewall_address/#references","text":"CLI Reference","title":"References"},{"location":"reference/firewall_policy/","text":"Firewall Policy Create firewall policies. Versions Ansible v2.10.4 Ansible collection fortinet.fortios v2.0.0 FortiOS 6.4 Usage CLI config firewall policy edit 1000 set srcintf \"any\" set dstintf \"any\" set srcaddr \"all\" set dstaddr \"all\" set action accept set schedule \"always\" set service \"ALL\" next end Ansible #!/usr/bin/env ansible-playbook --- - hosts : Enterprise_Core vars : firewall_policy_list : - policyid : 1000 name : ANY srcintf : [ name : any ] dstintf : [ name : any ] srcaddr : [ name : all ] dstaddr : [ name : all ] service : [ name : ALL ] action : accept schedule : always tasks : - name : Create Firewall Policy fortinet.fortios.fortios_firewall_policy : state : present access_token : \"{{ fortios_access_token }}\" firewall_policy : policyid : \"{{ item.policyid }}\" name : \"{{ item.name }}\" srcintf : \"{{ item.srcintf }}\" dstintf : \"{{ item.dstintf }}\" srcaddr : \"{{ item.srcaddr }}\" dstaddr : \"{{ item.dstaddr }}\" service : \"{{ item.service }}\" action : \"{{ item.action }}\" schedule : \"{{ item.schedule }}\" loop : \"{{ firewall_policy_list }}\" Terraform variable \"policy_any\" { default = { id = 1000 name = \"any\" srcintf = \"any\" dstintf = \"any\" srcaddr = \"all\" dstaddr = \"all\" service = \"ALL\" action = \"accept\" schedule = \"always\" } } resource \"fortios_firewall_policy\" \"any\" { policyid = var . policy_any . id name = var . policy_any . name srcintf { name = var . policy_any . srcintf } dstintf { name = var . policy_any . dstintf } srcaddr { name = var . policy_any . srcaddr } dstaddr { name = var . policy_any . dstaddr } service { name = var . policy_any . service } action = var . policy_any . action schedule = var . policy_any . schedule } References CLI Reference","title":"Policies"},{"location":"reference/firewall_policy/#firewall-policy","text":"Create firewall policies.","title":"Firewall Policy"},{"location":"reference/firewall_policy/#versions","text":"Ansible v2.10.4 Ansible collection fortinet.fortios v2.0.0 FortiOS 6.4","title":"Versions"},{"location":"reference/firewall_policy/#usage","text":"CLI config firewall policy edit 1000 set srcintf \"any\" set dstintf \"any\" set srcaddr \"all\" set dstaddr \"all\" set action accept set schedule \"always\" set service \"ALL\" next end Ansible #!/usr/bin/env ansible-playbook --- - hosts : Enterprise_Core vars : firewall_policy_list : - policyid : 1000 name : ANY srcintf : [ name : any ] dstintf : [ name : any ] srcaddr : [ name : all ] dstaddr : [ name : all ] service : [ name : ALL ] action : accept schedule : always tasks : - name : Create Firewall Policy fortinet.fortios.fortios_firewall_policy : state : present access_token : \"{{ fortios_access_token }}\" firewall_policy : policyid : \"{{ item.policyid }}\" name : \"{{ item.name }}\" srcintf : \"{{ item.srcintf }}\" dstintf : \"{{ item.dstintf }}\" srcaddr : \"{{ item.srcaddr }}\" dstaddr : \"{{ item.dstaddr }}\" service : \"{{ item.service }}\" action : \"{{ item.action }}\" schedule : \"{{ item.schedule }}\" loop : \"{{ firewall_policy_list }}\" Terraform variable \"policy_any\" { default = { id = 1000 name = \"any\" srcintf = \"any\" dstintf = \"any\" srcaddr = \"all\" dstaddr = \"all\" service = \"ALL\" action = \"accept\" schedule = \"always\" } } resource \"fortios_firewall_policy\" \"any\" { policyid = var . policy_any . id name = var . policy_any . name srcintf { name = var . policy_any . srcintf } dstintf { name = var . policy_any . dstintf } srcaddr { name = var . policy_any . srcaddr } dstaddr { name = var . policy_any . dstaddr } service { name = var . policy_any . service } action = var . policy_any . action schedule = var . policy_any . schedule }","title":"Usage"},{"location":"reference/firewall_policy/#references","text":"CLI Reference","title":"References"}]}